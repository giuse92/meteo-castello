{"version":3,"sources":["components/CurrentWeatherContext.js","components/CWDetail.js","components/CurrentWeather.js","components/ForecastWeather.js","App.js","reportWebVitals.js","index.js"],"names":["CurrentWeatherContext","createContext","CWDetail","useContext","currentState","err","isLoaded","className","feelslike_c","cloud","precip_mm","humidity","wind_kph","gust_kph","wind_degree","pressure_mb","API_URL","process","CurrentWeather","useState","setCurrentState","conditionState","setConditionState","setErr","setIsLoaded","useEffect","fetch","then","res","json","data","current","condition","catch","lastDateUpdated","Date","last_updated","lastDayUpdated","getDate","lastMonthUpdated","getMonth","lastYearUpdated","getFullYear","lastHourUpdated","getHours","lastMinutesUpdated","getMinutes","style","textAlign","temp_c","text","src","icon","alt","Provider","value","API_URL_FORECAST","ForecastWeather","forecastDayState","setForecastDayState","forecast","forecastday","toggleForecast","ev","currentTarget","nextElementSibling","display","map","elmt","i","forecastDate","date","onClick","hour","idx","dayForHours","time","is_day","heatindex_c","dewpoint_c","vis_km","chance_of_rain","chance_of_snow","App","href","title","rel","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3bd9077c.chunk.js","sourcesContent":["import {createContext} from 'react';\r\n\r\nconst CurrentWeatherContext= createContext(null);\r\n\r\nexport default CurrentWeatherContext;\r\n","import React, { useContext } from 'react';\r\nimport CurrentWeatherContext from \"./CurrentWeatherContext\";\r\n\r\nconst CWDetail = () => {\r\n    const { currentState, err, isLoaded } = useContext(CurrentWeatherContext);\r\n    \r\n    if (err) return <p>Errore</p>\r\n    else if (!isLoaded) return <p>In caricamento</p>\r\n    return (\r\n        <section className=\"contenitore-sez cw-detail\">\r\n            <table>\r\n                <caption>Nel dettaglio:</caption>\r\n                <tbody>\r\n                    <tr>\r\n                        <td>Temperatura percepita: {`${currentState.feelslike_c}`} °C</td>\r\n                        <td>Copertura nuvole: {`${currentState.cloud}`} %</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Precitazioni: {`${currentState.precip_mm}`} mm</td>\r\n                        <td>Umidità: {`${currentState.humidity}`} %</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Velocità vento: {`${currentState.wind_kph}`} km/h</td>\r\n                        <td>Raffica vento: {`${currentState.gust_kph}`} km/h</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Direzione vento: {`${currentState.wind_degree}`} °</td>\r\n                        <td>Pressione: {`${currentState.pressure_mb}`} mb</td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default CWDetail;","import React, { useEffect, useState } from 'react';\r\nimport CWDetail from './CWDetail';\r\nimport CurrentWeatherContext from \"./CurrentWeatherContext\";\r\n\r\nconst apiKey = process.env.REACT_APP_API_KEY;\r\nconst API_URL = `https://api.weatherapi.com/v1/current.json?key=${apiKey}&q=Castelfranco+Emilia&lang=it`;\r\n\r\nconst CurrentWeather = () => {\r\n    const [currentState, setCurrentState] = useState({});\r\n    const [conditionState, setConditionState] = useState({});\r\n    const [err, setErr] = useState(null);\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n\r\n    useEffect(() => {\r\n        fetch(API_URL)\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                setIsLoaded(true);\r\n                setCurrentState(data.current);\r\n                setConditionState(data.current.condition);\r\n            })\r\n            .catch(err => {\r\n                setIsLoaded(true);\r\n                setErr(err)\r\n            });\r\n    }, []);\r\n\r\n    const lastDateUpdated = new Date(currentState.last_updated);\r\n    const lastDayUpdated = lastDateUpdated.getDate();\r\n    const lastMonthUpdated = lastDateUpdated.getMonth() + 1;\r\n    const lastYearUpdated = lastDateUpdated.getFullYear();\r\n    const lastHourUpdated = lastDateUpdated.getHours();\r\n    const lastMinutesUpdated = lastDateUpdated.getMinutes();\r\n\r\n    if (err) return <p style={{ textAlign: 'center' }}>Errore</p>\r\n    else if (!isLoaded) return <p style={{ textAlign: 'center' }}>In caricamento</p>\r\n    return (\r\n        <>\r\n            <section className=\"contenitore-sez current-weather\">\r\n                <div className=\"blocco-testuale\">\r\n                    <h1>Meteo di Castelfranco Emilia adesso</h1>\r\n                    <p className=\"sottotitolo\">ultimo aggiornamento: {`${lastDayUpdated}-${lastMonthUpdated}-${lastYearUpdated} ore ${lastHourUpdated}:`}{lastMinutesUpdated < 10 ? `0${lastMinutesUpdated}` : lastMinutesUpdated}</p>\r\n                    <p className=\"gradi\">{`${currentState.temp_c}`} °C</p>\r\n                    <p className=\"descrizione-tempo\">{`${conditionState.text}`}</p>\r\n                </div>\r\n                <div className=\"icona\">\r\n                    <img src={`${conditionState.icon}`} alt={`${conditionState.text}`}></img>\r\n                </div>\r\n            </section>\r\n            <CurrentWeatherContext.Provider value={{ currentState, conditionState, err, isLoaded }}>\r\n                <CWDetail />\r\n            </CurrentWeatherContext.Provider>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default CurrentWeather;","import React, { useEffect, useState } from 'react';\r\n\r\nconst apiKey = process.env.REACT_APP_API_KEY;\r\nconst API_URL_FORECAST = `https://api.weatherapi.com/v1/forecast.json?key=${apiKey}&q=Castelfranco+Emilia&lang=it&days=10`;\r\n\r\nconst ForecastWeather = () => {\r\n    const [forecastDayState, setForecastDayState] = useState([]);\r\n    const [err, setErr] = useState(null);\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n\r\n    useEffect(() => {\r\n        fetch(API_URL_FORECAST)\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                setIsLoaded(true);\r\n                setForecastDayState(data.forecast.forecastday);\r\n            })\r\n            .catch(err => {\r\n                setIsLoaded(true);\r\n                setErr(err)\r\n            });\r\n    }, []);\r\n\r\n    const toggleForecast = ev => {\r\n        ev.currentTarget.nextElementSibling.style.display === 'none'\r\n            ? ev.currentTarget.nextElementSibling.style.display = 'block'\r\n            : ev.currentTarget.nextElementSibling.style.display = 'none'\r\n    }\r\n\r\n    if (err) return <p>Errore</p>\r\n    else if (!isLoaded) return <p>Caricamento in corso...</p>\r\n    return (\r\n        <section className=\"forecast\">\r\n            <small>Previsioni ora per ora di oggi e dei prossimi due giorni</small>\r\n            {forecastDayState.map((elmt, i) => {\r\n                const forecastDate = new Date(elmt.date);\r\n                return (\r\n                    <div className=\"previsione-giorno\" key={`title-${i}`}>\r\n                        <button onClick={toggleForecast}>\r\n                            <span>\r\n                                {`${forecastDate.getDate()}-${forecastDate.getMonth() + 1}-${forecastDate.getFullYear()} `}\r\n                            </span>\r\n                        </button>\r\n                        <div className=\"previsione-per-ora\" style={{ display: 'none' }}>\r\n                            {elmt.hour.map((hour, idx) => {\r\n                                const dayForHours = new Date(hour.time);\r\n                                return (\r\n                                    <div key={`hour-${idx}`} className={hour.is_day === 0 ? \"dettaglio-per-ora gradiente-am\" : \"dettaglio-per-ora gradiente-pm\"}>\r\n                                        <h5>{`Ore ${dayForHours.getHours()}:00`}</h5>\r\n                                        <span>\r\n                                            <img src={`${hour.condition.icon}`} alt={`${hour.condition.text}`}></img>\r\n                                            <p>{hour.condition.text}</p>\r\n                                        </span>\r\n                                        <table>\r\n                                            <tbody>\r\n                                                <tr>\r\n                                                    <th>Temperatura</th>\r\n                                                    <th>Percepiti</th>\r\n                                                    <th>Indice di calore</th>\r\n                                                    <th>Punto di rugiada</th>\r\n                                                    <th>Visibilità</th>\r\n                                                    <th>Possibilità di pioggia</th>\r\n                                                    <th>Possibilità di neve</th>\r\n                                                    <th>Velocità del vento max</th>\r\n                                                </tr>\r\n                                                <tr>\r\n                                                    <td>{hour.temp_c} °C</td>\r\n                                                    <td>{hour.feelslike_c} °C</td>\r\n                                                    <td>{hour.heatindex_c} °C</td>\r\n                                                    <td>{hour.dewpoint_c} °C</td>\r\n                                                    <td>{hour.vis_km} km</td>\r\n                                                    <td>{hour.chance_of_rain} %</td>\r\n                                                    <td>{hour.chance_of_snow} %</td>\r\n                                                    <td>{hour.wind_kph} km/h</td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        </table>\r\n                                    </div>\r\n                                )\r\n                            })}\r\n                        </div>\r\n                    </div>\r\n                )\r\n            })}\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default ForecastWeather;","import './App.css';\r\nimport CurrentWeather from './components/CurrentWeather';\r\nimport ForecastWeather from './components/ForecastWeather'\r\n\r\nfunction App() {\r\n  const logoUrl = \"https://upload.wikimedia.org/wikipedia/it/d/d6/Castelfranco_Emilia-Stemma.png\"\r\n  const logoHref = \"https://www.comune.castelfranco-emilia.mo.it/servizi/notizie/notizie_homepage.aspx\";\r\n  return (\r\n    <>\r\n      <nav className=\"contenitore\">\r\n        <a href={`${logoHref}`}>\r\n          <img src={`${logoUrl}`} alt=\"Castelfranco Emilia logo\"></img>\r\n        </a>\r\n      </nav>\r\n      <main className=\"contenitore\">\r\n        <CurrentWeather />\r\n        <ForecastWeather />\r\n      </main>\r\n      <footer className=\"contenitore\">\r\n        <span>Powered by <a href=\"https://www.weatherapi.com/\" title=\"Free Weather API\">WeatherAPI.com</a></span> \r\n        <span>Sito a scopo informativo, non sono richiesti nè dati nè si fa uso di Analytics per tracciare il traffico</span>\r\n        <a href=\"mailto:giuseppe.ilsami@gmail.com\" rel=\"nofollow\">Email dev</a>\r\n      </footer>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}